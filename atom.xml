<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DingPP&#39;Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-12T10:58:03.532Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Ding</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java Inheritance(继承)</title>
    <link href="http://example.com/2022/11/12/java%E7%BB%A7%E6%89%BF/"/>
    <id>http://example.com/2022/11/12/java%E7%BB%A7%E6%89%BF/</id>
    <published>2022-11-12T08:23:42.000Z</published>
    <updated>2022-11-12T10:58:03.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java继承相关语句"><a href="#Java继承相关语句" class="headerlink" title="Java继承相关语句"></a>Java继承相关语句</h1><span id="more"></span><h2 id="继承的概念"><a href="#继承的概念" class="headerlink" title="继承的概念"></a>继承的概念</h2><p>继承是面向对系程序设计的一个主要特征，是一种由已有的类创建新类的机制。它允许创建分等级、分层次。利用继承，我们可以先创建一个具有一系列相关对象的一般特性的通用类,然后根据该通用类再创建具有特殊特性的新类。新类继承通用类的状态和行为，并根据需要增加自己的新的状态和行为。由继承而得到的类称为子类或派生类，被继承的通用类称为父类、超类或基类。</p><p>继承反映了类型之间的静态联系，它很好地模拟了现实世界中的分类别、多层饮的对象关系。在编程技术中，继承是一种代码复用技术，它使得我们可以在一定的基础上进行开发工作，而不需要一切从零开始。<br>注意，C++支持生重继承，即一个子类可以有多个超类。在Java 中，只支持单一继承，即一个子类只有一个超类，不允许多重继死，但通过接口,也可以间接实现多继承。</p><h2 id="子类创建"><a href="#子类创建" class="headerlink" title="子类创建"></a>子类创建</h2><p>(1)  子类包含类的声明和类体两个部分；子类继承性是通过在子类的声明语句后面使用关键词<code>extends</code>来体现。</p><p>(2)  创建子类的一般语法格式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[访问修饰符][类型修饰符] class 子类名 extends 超类 &#123;</span><br><span class="line">[子类成员变量声明]</span><br><span class="line">[子类方法定义]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">......</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果声明中没有<code>extands</code>关键字，则系统默认继承<code>Object</code>类</p><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><h3 id="1-类访问修饰符"><a href="#1-类访问修饰符" class="headerlink" title="1.类访问修饰符"></a>1.类访问修饰符</h3><p> 声明类时可以用两种访问修饰符：<code>public</code>和<code>缺省</code>（就是没有任何修饰符）。使用缺省修饰符类声明的类为友好类。使用<code>public</code>修饰符的类为公有类，公有类可以被包内包外的任意类访问，即使在任意类中 ；使用<code>public</code>类都是可见的，如果希望包中成员能被包外的类访问，必须将类的声明为<code>pubilc</code>；友好类只能被同一个包中的类访问，在同一个包中是可见的。</p><p>举个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mypackage1;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> mypackage2;</span><br><span class="line"><span class="keyword">import</span> mypackage1.A;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">A a;<span class="comment">//台法•A是public类，在任意类中可见</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> mypackage3;</span><br><span class="line"><span class="keyword">import</span> mypackage1.A;</span><br><span class="line"><span class="keyword">import</span> mypackage1.B;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">A a;<span class="comment">//合法，A是public 类，在任意类中可见</span></span><br><span class="line">B b;<span class="comment">//非法,B是友好类，在包外类中不可见</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> mypackage1;</span><br><span class="line"><span class="keyword">import</span> mypackage1.A;</span><br><span class="line"><span class="keyword">import</span> mypackage3.C;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>&#123;</span><br><span class="line">A a;<span class="comment">//合法，A是public 类，在任何类中可见</span></span><br><span class="line">B b;<span class="comment">//合法，B是友好类，但和D 在同一个包中</span></span><br><span class="line">C c;<span class="comment">//非法，C是友好类，在包外类中不可见</span></span><br><span class="line">       ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-类成员访问修饰符"><a href="#2-类成员访问修饰符" class="headerlink" title="2.类成员访问修饰符"></a>2.类成员访问修饰符</h3><p>声明类成员空址和方法时，可使用的访问修饰行有四种;private、public、proreced 和缺省。</p><h4 id="1-private-访问修饰符"><a href="#1-private-访问修饰符" class="headerlink" title="(1)  private 访问修饰符"></a>(1)  private 访问修饰符</h4><p>使用private声明的成员变量和方法称为私有变量和私有方法，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> animalworld:</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> (</span><br><span class="line"><span class="keyword">private</span> <span class="type">float</span> weight;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> legs;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">eat</span> <span class="params">()</span> &#123;</span><br><span class="line">System. out.println(<span class="string">&quot;我喜欢吃鱼&quot;</span>）：</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>私有变量和私有方法只能在声明它们的类中使用，在类外不可见，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> animalworld;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mouse</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String color;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> play)&#123;</span><br><span class="line">Systerm.out. prindn(”我喜欢猫”），</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">Mouse Jerry= <span class="keyword">new</span> <span class="title class_">Mouse</span>);</span><br><span class="line"><span class="type">Cat</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Catt</span>()) ;</span><br><span class="line">tom.weight = <span class="number">23f</span> ; <span class="comment">//非法，在Cat 类的外部访问它的私有变量</span></span><br><span class="line">tom.legs =<span class="number">4</span> ; <span class="comment">//非法，在Cat 类的外部访问它的私有变量</span></span><br><span class="line">        tom.eat() ; <span class="comment">//非法，在Cat 类的外部访问它的私有方法</span></span><br><span class="line">Jerry.color = <span class="string">&quot;黑色&quot;</span> ; <span class="comment">//合法，在本类中访问私有变量</span></span><br><span class="line">        Jerry.play() &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-public-修饰符"><a href="#2-public-修饰符" class="headerlink" title="(2)  public 修饰符"></a>(2)  public 修饰符</h4><p>使用 public 声明的成员变量和方法称为公有变量和公有方法，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> animalworld;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">float</span> weight ;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> legs ;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我喜欢吃鱼&quot;</span>）;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-protected-访问修饰符"><a href="#3-protected-访问修饰符" class="headerlink" title="(3)  protected 访问修饰符"></a>(3)  protected 访问修饰符</h4><p>使用protected 声明的成员变量和方法称为受保护的变量和受保护的方法，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> animalworld;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">float</span> weight ;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> eat) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我喜欢吃鱼&quot;</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4）缺省访问修饰符"><a href="#4）缺省访问修饰符" class="headerlink" title="(4）缺省访问修饰符"></a>(4）缺省访问修饰符</h4><p>不使用 private protected 及public声明的成员变量和方法称为友好变量和友好方法。友好变量和友好方法能够在同一个包的其他类中被所屆类的对象或类名访问，而不能被任何包外类的对象或类名访问。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mypackage1 ;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line"><span class="type">float</span> weight ;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> legs ;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">eat</span> <span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我喜欢吃鱼&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> mypackage1;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mouse</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">f</span> <span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Cat</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span> ;</span><br><span class="line">tom,.eight = <span class="number">23f</span>        <span class="comment">//合法，Cat 类和Mouse 类在同一个包中</span></span><br><span class="line">Cat.legs = <span class="number">4</span> ;          <span class="comment">//合法</span></span><br><span class="line">tom.eat();              <span class="comment">//合法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> mypackage2;</span><br><span class="line"><span class="keyword">import</span> mypackage1.Cat;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">g</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Cat</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(); </span><br><span class="line">tom.weight =<span class="number">23f</span> ;    <span class="comment">//非法，weight 是 Cat 类的友好变量，而Cat 类和 Dog 类不在同一个包中</span></span><br><span class="line">Cat.legs = <span class="number">4</span> ;       <span class="comment">//非法</span></span><br><span class="line">tom.eat() ;          <span class="comment">//非法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-子类的继承性"><a href="#3-子类的继承性" class="headerlink" title="3.子类的继承性"></a>3.子类的继承性</h3><p>子类能继承超类的成员交量和成员方法。在继承过程中，需要注意的是，类的每一个成员都被赋子了一定的访问权限，成员访问权限不同，子类对它的继承性也不同。子类对超类的继承性主要有以下三种情况：</p><h4 id="1-在同一个包中，子类能继承超类的所有非private-成员。"><a href="#1-在同一个包中，子类能继承超类的所有非private-成员。" class="headerlink" title="(1)  在同一个包中，子类能继承超类的所有非private 成员。"></a>(1)  在同一个包中，子类能继承超类的所有非private 成员。</h4><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mypackage1;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> legs ;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">float</span> weight ;</span><br><span class="line">String color ; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> mypackage1;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">g</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Cat</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>() ;</span><br><span class="line">tom.legs =<span class="number">4</span> ;          <span class="comment">//合法，继承了公有变量</span></span><br><span class="line">tom.weight = <span class="number">23f</span> ;     <span class="comment">//合法，继承了受保护的变量</span></span><br><span class="line">tom.color = <span class="string">&quot;白色&quot;</span> ;    <span class="comment">//合法,继承了友好变量</span></span><br><span class="line">tom.f() ;              <span class="comment">//非法,私有方法没有被继承,不能被访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-在不同包中，子类具能继承超类的-public-和-protected-成员。"><a href="#2-在不同包中，子类具能继承超类的-public-和-protected-成员。" class="headerlink" title="(2)  在不同包中，子类具能继承超类的 public 和 protected 成员。"></a>(2)  在不同包中，子类具能继承超类的 <code>public</code> 和 <code>protected</code> 成员。</h4><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mypackage1;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;     <span class="comment">//类的访问修饰符必须为public，オ能被其他包中的类可见</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> legs ;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">float</span> weight ;</span><br><span class="line">String color ;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> mypackage2;</span><br><span class="line"><span class="keyword">import</span> mypackage1.Animal ;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>  &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[]args)</span> &#123;</span><br><span class="line"><span class="type">Cat</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cats</span>() ;</span><br><span class="line">tom.legs =<span class="number">4</span> ;         <span class="comment">//合法，不同包可以継‡公有変量</span></span><br><span class="line">tom.weight = <span class="number">23f</span> ;    <span class="comment">//合法，不同包可以继承受保护的变量</span></span><br><span class="line">tom.color = <span class="string">&quot;白色&quot;</span> ;   <span class="comment">//非法，不同包不可以继承友好変量</span></span><br><span class="line">tom.f() ;             <span class="comment">//非法，私有方法没有被继承，不能访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Java继承相关语句&quot;&gt;&lt;a href=&quot;#Java继承相关语句&quot; class=&quot;headerlink&quot; title=&quot;Java继承相关语句&quot;&gt;&lt;/a&gt;Java继承相关语句&lt;/h1&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="继承" scheme="http://example.com/tags/%E7%BB%A7%E6%89%BF/"/>
    
    <category term="知识" scheme="http://example.com/tags/%E7%9F%A5%E8%AF%86/"/>
    
    <category term="Inheritance" scheme="http://example.com/tags/Inheritance/"/>
    
  </entry>
  
  <entry>
    <title>博图</title>
    <link href="http://example.com/2022/11/11/%E5%8D%9A%E5%9B%BEv15%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/11/11/%E5%8D%9A%E5%9B%BEv15%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2022-11-11T13:13:59.000Z</published>
    <updated>2022-11-12T08:32:18.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博图v15安装报错问题解决方法"><a href="#博图v15安装报错问题解决方法" class="headerlink" title="博图v15安装报错问题解决方法"></a>博图v15安装报错问题解决方法</h1><span id="more"></span><h2 id="1-报错代码"><a href="#1-报错代码" class="headerlink" title="1.报错代码"></a>1.报错代码</h2><blockquote><p>ycle dete4jed: VC_2013_REDIST_×36-&gt;VC_2013_REDIST_×64-<br>VS_2005 <em>EXTENSIBILITY-»VC</em> 20 12 REDIST X86-»VC 2012 REDIST X64<br>-&gt;VC 2015 REDIST x86-&gt;VC 2015 REDIST X64-&gt;MSHELP_ WINT-<br>MSHELP WIN2008-&gt;MSHELP WIN2008R2-MSHELP VISTA-&gt;ADMINPAK</p></blockquote><h2 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2.解决办法"></a>2.解决办法</h2><ul><li><p>1.首先检查一下是不是电脑缺少相应的库，微软官方有相应安装包<br>[点击转跳微软]（<a href="https://learn.microsoft.com/zh-CN/cpp/windows/latest-supported-vc-redist?view=msvc-170%EF%BC%89%EF%BC%8C">https://learn.microsoft.com/zh-CN/cpp/windows/latest-supported-vc-redist?view=msvc-170），</a><br>安装上还是不行，那就继续往下看。</p></li><li><p>2.有可能是你本身安装错误，下面说一下正确安装顺序和方法，第一步安装STEP7 Professional，第二步安装STEP7_Simulation，第三步安装驱动，在安装时STEP7 Professional，STEP7_Simulation和驱动时不要安装在一个子目录下 （就是别装在同一个文件夹里面），这样不存在覆盖问题，也没有冲突，很多错误就在安装在一个子目录下导致的错误；举个例子方便理解，像我这样分别建一个文件夹，请看下图举例照片<br><img src="https://img-blog.csdnimg.cn/9eec84b1543348bf8e236d6c67f1e5fd.png#pic_center" alt="举例截图"></p></li></ul><h2 id="3-完事，再会！！！s"><a href="#3-完事，再会！！！s" class="headerlink" title="3.完事，再会！！！s"></a>3.完事，再会！！！s</h2>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;博图v15安装报错问题解决方法&quot;&gt;&lt;a href=&quot;#博图v15安装报错问题解决方法&quot; class=&quot;headerlink&quot; title=&quot;博图v15安装报错问题解决方法&quot;&gt;&lt;/a&gt;博图v15安装报错问题解决方法&lt;/h1&gt;</summary>
    
    
    
    
    <category term="博图" scheme="http://example.com/tags/%E5%8D%9A%E5%9B%BE/"/>
    
    <category term="PLC" scheme="http://example.com/tags/PLC/"/>
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse</title>
    <link href="http://example.com/2022/11/11/eclipse%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%97%B6%E4%BC%9A%E8%BD%AC%E8%B7%B3%E7%BD%91%E9%A1%B5%E7%9A%84%E5%87%A0%E7%A7%8D%E5%8F%AF%E8%83%BD%E6%83%85%E5%86%B5%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://example.com/2022/11/11/eclipse%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%97%B6%E4%BC%9A%E8%BD%AC%E8%B7%B3%E7%BD%91%E9%A1%B5%E7%9A%84%E5%87%A0%E7%A7%8D%E5%8F%AF%E8%83%BD%E6%83%85%E5%86%B5%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2022-11-11T13:13:59.000Z</published>
    <updated>2022-11-12T13:03:42.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Eclipse软件安装时会转跳网页的几种可能情况，以及其解决办法"><a href="#Eclipse软件安装时会转跳网页的几种可能情况，以及其解决办法" class="headerlink" title="Eclipse软件安装时会转跳网页的几种可能情况，以及其解决办法"></a>Eclipse软件安装时会转跳网页的几种可能情况，以及其解决办法</h1><span id="more"></span><p>我在安装Eclipse的时候出现了安装时跳转网页，让我非常的头痛，查了一些资料都没用，自己发现了其中的一些玄机啊，分享给大家。</p><h2 id="第一种情况：JDK位数与系统位数不同"><a href="#第一种情况：JDK位数与系统位数不同" class="headerlink" title="第一种情况：JDK位数与系统位数不同"></a>第一种情况：JDK位数与系统位数不同</h2><p>1.首先查看自己的JDK位数。<br>2.查看方法：win键+R进入cmd，在cmd中输入命令 <code>java -version</code> 即可显示当前系统的JDK版本。</p><p><img src="https://img-blog.csdnimg.cn/20200909185738175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RwcGtpcml0bw==,size_16,color_FFFFFF,t_70#pic_center" alt="图片"><br>这种就是64位，没有就是32位。<br>3.eclipse安装包的位数和JDK位数不一致就会发生点击eclipse安装包转跳网页这种情况，可自行进入 <a href="https://www.oracle.com/java/technologies/downloads/#java8">JDKK官网</a>  进行下载64位版本。</p><p>4.安装64位JDK前需要卸载旧的32JDK哦，要不然会有一些冲突，记得删掉C盘中Program Files中的java文件夹，把java文件夹删了喔，不是只删除java中的文件夹喔。</p><p><img src="https://img-blog.csdnimg.cn/20200909192501234.png#pic_center" alt="java截图"></p><h2 id="第二种情况：电脑的用户名是中文，或者电脑名字是中文。"><a href="#第二种情况：电脑的用户名是中文，或者电脑名字是中文。" class="headerlink" title="第二种情况：电脑的用户名是中文，或者电脑名字是中文。"></a>第二种情况：电脑的用户名是中文，或者电脑名字是中文。</h2><p>1.修改用户名，很多跳转网页的问题都是电脑用户名是中文，建议电脑用户名都用英文，用中文名其他软件也容易出现问题。</p><h2 id="安装eclipse"><a href="#安装eclipse" class="headerlink" title="安装eclipse"></a>安装eclipse</h2><p>最后安装好64位JDK，也改好了用户名和电脑名后，再次点击eclipse安装包应该能行了。<br><img src="https://img-blog.csdnimg.cn/20200909193544702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RwcGtpcml0bw==,size_16,color_FFFFFF,t_70#pic_center" alt="安装成功截图"></p><h2 id="再会！！！"><a href="#再会！！！" class="headerlink" title="再会！！！"></a>再会！！！</h2>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Eclipse软件安装时会转跳网页的几种可能情况，以及其解决办法&quot;&gt;&lt;a href=&quot;#Eclipse软件安装时会转跳网页的几种可能情况，以及其解决办法&quot; class=&quot;headerlink&quot; title=&quot;Eclipse软件安装时会转跳网页的几种可能情况，以及其解决办法&quot;&gt;&lt;/a&gt;Eclipse软件安装时会转跳网页的几种可能情况，以及其解决办法&lt;/h1&gt;</summary>
    
    
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Eclipse" scheme="http://example.com/tags/Eclipse/"/>
    
  </entry>
  
</feed>
